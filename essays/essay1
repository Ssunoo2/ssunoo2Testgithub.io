---
layout: essay
type: essay
title: "The difficult things will always be difficult"
# All dates must be YYYY-MM-DD format!
date: 2016-02-06
published: true
labels:
  - Engineering
---
###Syntax and implementation versus grammar and logic
I’ve always been told by friends whose software engineering experience shadow mine that “most coding languages are basically the same”. I ask them, “how can this be” and they reply that learning one or two basic languages allows you to learn the grammar and reasoning behind code so that switching to another involves simply learning new syntax and implementation. Of course, this opinion has always been accompanied with a disclaimer that there are outliers that try to do things that the simpler languages cannot.

###Face to face with a new language
Javascript, in my mind, has always been the magic that makes website applications work. I developed this idea when talking with others in my cohort that work with Javascript in their everyday jobs as well as studying curriculums of various coding bootcamps that promise to mold you into a budding software engineer. I’ve also encountered javascript before in modules that I engaged with in my free time before I decided to pursue a BS in Computer Science in several platforms such as CodeCademy and Odin project. Each time, I would digest the code to learn and stimulate my mind before returning to other tasks that would displace the coding practice that I had just learned. I am excited to actually implement some code into something tangible this semester!

###A familiar face
Javascript itself is reminiscent of Java programming. The words of my peers seemed to manifest themselves as the basic grammar and languages of my previous academic experiences lent themselves towards easy and swift interpretations of the modules I experienced in my first software engineering class. The syntax differed slightly, but I know that experience and practice will lead to a competent level of fluency; and I am excited for that, as the constant barrage of practice exercises is sure to hone my programming proficiency. 
The WODs(workout of the day) that are required for the class are a great format to practice your abilities and identify and learn from your mistakes. Their repeatability is encouraging, as there is often more than one way to complete a task and by engaging in these challenges, you can hope to improve your understanding of the language and minimize the time it takes to identify and implement solutions to problems.

###Learning from mistakes
One of my favorite parts about learning is making mistakes. I’ve tried my damndest over the years to separate myself from anxiety-driven perfectionism. I’ve felt that previous academic experiences strongly valued high marks over actual learning. I’ve studied Oxidative phosphorylation in upwards of four classes in the past and still can’t tell you what any of the processes of individual enzymes are.
	Programming, on the other hand, has always felt like constant trial and error. Sometimes your blood pressure rises from compilation errors resulting from a missing comma that eludes your gaze for longer than you care to admit, but ultimately the result that you desire is typically achievable and getting there is a matter of dispelling a barrage of stimulating puzzles. Being able to analyze why you failed one occasion and improving upon yourself is an incredibly valuable trait that is necessary in computer science. If Javascript is one step towards becoming a better version of myself, then I am excited for what’s to come!
